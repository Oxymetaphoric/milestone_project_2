const apiLink="https://api-preview.netrunnerdb.com/api/v3/public/",allCardsDiv="#allCards",myDeckDiv="#myDeck";let userSelectedID=!1,userDeck={title:null,side:null,faction:null,deck_id:{},id_title:"",id_subtype:"",min_deck_size:null,current_deck_size:null,total_influence:null,current_influence:null,base_link:null,cards:[]};function nullDeck(){$("#myDeck").empty(),userDeck={title:null,side:null,faction:null,deck_id:{},id_title:"",id_subtype:"",min_deck_size:null,current_deck_size:null,total_influence:null,current_influence:null,base_link:null,cards:[]}}async function fetchCards(t,e="",s="",n){const a=await fetch(`${t}${e}?filter[${s}]=${n}`),i=await a.json();let c=i.links.next;i.links.prev;if(c){const t=await fetchCards(c);i.data=[...i.data,...t]}return i.data}async function getCardTypes(t){let e=await fetch("https://api-preview.netrunnerdb.com//api/v3/public/card_types");return(await e.json()).data.filter((e=>e.attributes.side_id===t))}async function filterCards(t="",e="",s=""){let n=(await fetchCards(apiLink,"cards","side_id",s)).filter((s=>s.attributes[t]===e));return n.sort(((t,e)=>{let s=t.attributes.faction_id,n=e.attributes.faction_id;return s.localeCompare(n)})),n}async function populateCards(t,e,s){$(s).empty(),$(s).show(),t.forEach((t=>{let n=t.attributes.faction_id,a=`/assets/images/NSG-Visual-Assets/SVG/FactionGlyphs/NSG_${n}.svg`,i=t.attributes.faction_id.replace(/_/g," ").replace(/\b\w/g,(t=>t.toUpperCase())).replace(/Nbn/g,"NBN").replace(/Haas/g,"Haas-"),c=t.attributes.card_type_id.replace(/_/g," ").replace(/\b\w/g,(t=>t.toUpperCase())),r=`\n      <div class="row cardEntry ${n}">  \n        <img class="row faction_icon" src = ${a}>\n        <div class="col">\n          <h2 class='card-title'>\n            ${t.attributes.title}\n          </h2>\n          <p class='cardFaction'>${i}</p>\n          <p class='cardFaction'><strong>${c}</strong> | ${t.attributes.display_subtypes}</p>\n        </div>\n      </div>`;$(s).append(r),$(".cardEntry").last().click((async()=>{await populateStage(t,e)}))}))}async function populateStage(t,e){let s=t.attributes.faction_id.replace(/_/g," ").replace(/\b\w/g,(t=>t.toUpperCase())).replace(/Nbn/g,"NBN").replace(/Haas/g,"Haas-"),n=t.attributes.card_type_id.replace(/_/g," ").replace(/\b\w/g,(t=>t.toUpperCase())),a="";if("corp"==e)switch(t.attributes.card_type_id){case"agenda":a=`\n        <div class="${t.attributes.faction_id} cardDisplay rounded-3">\n          <h1 class="text-center">${t.attributes.title}</h1>\n          <h2 class="text-center">${s}</h2>\n          <p class="col align-content-center ">\n            <em>Agenda Points: </em>\n            <img class="credit" src=\n          "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_AGENDA.svg"> ${t.attributes.agenda_points} \n          <span>&nbsp&nbsp|&nbsp&nbsp<em>Advancement Points: </em>${t.attributes.advancement_requirement}</em></p>\n          <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${t.attributes.display_subtypes?t.attributes.display_subtypes:""}</em> </p></span>\n          <br><br>\n          <p>${t.attributes.stripped_text}</p>\n          <div class="row ">\n            <div class="center-text">\n              <button class="addToDeckButton col" type="button">Add Card to Deck</button>\n            </div>\n          </div>\n        </div>`;break;case"asset":case"operation":case"upgrade":a=`\n          <div class="${t.attributes.faction_id} cardDisplay rounded-3">\n            <h1 class="text-center">${t.attributes.title}</h1>\n            <h2 class="text-center">${s}</h2>\n            <p class="col align-content-center ">\n              <em>Cost: </em>\n              <img class="credit" src=\n              "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_CREDIT.svg">${t.attributes.cost}\n              <span id="trashCost">&nbsp&nbsp|&nbsp&nbsp<em>Trash: </em>\n              <img class="credit" src=\n              "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_TRASH_COSTbw.svg">${t.attributes.trash_cost}&nbsp&nbsp|</span>\n              <span>\n                &nbsp&nbsp\n                <em>Influence: </em>\n                ${t.attributes.influence_cost}\n              </span>\n            </p>\n            <span>\n              <p>\n                <Strong>${n}</Strong>\n                &nbsp&nbsp|&nbsp&nbsp<em>${t.attributes.display_subtypes?t.attributes.display_subtypes:""}</em>\n              </p>\n            </span>\n            <br><br>\n            <p>${t.attributes.stripped_text}</p>\n            <div class="row ">\n              <div class="center-text">\n                <button class="addToDeckButton col" type="button">Add Card to Deck</button>\n              </div>\n            </div>\n          </div>`;break;case"ice":a=`\n          <div class="${t.attributes.faction_id} cardDisplay rounded-3">\n            <h1 class="text-center">${t.attributes.title}</h1>\n            <h2 class="text-center">${s}</h2>\n            <p class="col align-content-center "><em>Rez Cost: </em><img class="credit" src=\n            "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_REZ_COST.svg"> ${t.attributes.cost}<span>&nbsp&nbsp|&nbsp&nbsp\n            <em>Strength: </em>${t.attributes.strength}\n            <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${t.attributes.display_subtypes?t.attributes.display_subtypes:""}</em></p></span><br>\n            <p>${t.attributes.stripped_text}"</p>\n            <div class="row ">\n              <div class="center-text">\n                <button class="addToDeckButton col" type="button">Add Card to Deck</button>\n              </div>\n            </div>\n          </div>`;break;case"corp_identity":a=`\n        <div class="${t.attributes.faction_id} cardDisplay rounded-3">\n          <h1 class="text-center">${t.attributes.title}</h1>\n          <h2 class="text-center">${s}</h2>\n          <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${t.attributes.display_subtypes?t.attributes.display_subtypes:""}</em><br><br>\n          <strong>Minimum Deck Size: </strong>${t.attributes.minimum_deck_size}<br>\n          <strong>Influence: </strong>${t.attributes.influence_limit}</p></span> </p></span>\n          <p>${t.attributes.stripped_text}</p>\n          <div class="row">\n            <div class="center-text">\n              <button class="userID col" type="button">Build deck with this ID</button>\n            </div>\n          </div>\n        </div>`;break}if("runner"==e)switch(t.attributes.card_type_id){case"hardware":case"resource":case"program":case"event":a=`\n          <div class="${t.attributes.faction_id} cardDisplay rounded-3">\n            <h1 class="text-center">${t.attributes.title}</h1>\n            <h2 class="text-center">${s}</h2>\n            <p class="col align-content-center ">\n              <em>Cost: </em>\n              <img class="credit" src=\n            "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_CREDIT.svg">${t.attributes.cost}<span>&nbsp&nbsp|&nbsp&nbsp<em>Influence: </em>${t.attributes.influence_cost}\n           \n            <span id="memoryCost">&nbsp&nbsp|&nbsp&nbsp\n              <em>Memory Cost: </em>\n              <img class="credit" src=\n              "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_Mu.svg">${t.attributes.memory_cost?t.attributes.memory_cost:""}\n            </span>\n              <span>\n                <p>\n                  <Strong>${n}</Strong>\n                  &nbsp&nbsp|&nbsp&nbsp<em>${t.attributes.display_subtypes?t.attributes.display_subtypes:""}</em>\n                </p>\n              </span>\n            <p>${t.attributes.stripped_text}</p>\n            <div class="row ">\n              <div class="center-text">\n                <button class="addToDeckButton col" type="button">Add Card to Deck</button>\n              </div>\n            </div>\n          </div>`;break;case"runner_identity":a=`<div class="${t.attributes.faction_id} cardDisplay rounded-3">\n          <h1 class="text-center">${t.attributes.title}</h1>\n          <h2 class="text-center">${s}</h2>\n          <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${t.attributes.display_subtypes?t.attributes.display_subtypes:""}</em>\n          <br><strong>Link: </strong>${t.attributes.base_link}<br>\n          <strong>Minimum Deck Size: </strong>${t.attributes.minimum_deck_size}<br>\n          <strong>Influence: </strong>${t.attributes.influence_limit}</p></span>\n          <p>${t.attributes.stripped_text}</p>\n          <div class="row ">\n              <div class="center-text">\n                <button class="userID col" type="button">Build deck with this ID</button>\n              </div>\n          </div>\n        </div>`;break}$("#main-stage-display").html(a),null==t.attributes.memory_cost?$("#memoryCost").hide():$("#memoryCost").show(),null==t.attributes.trash_cost?$("#trashCost").hide():$("#trashCost").show(),$(".userID").off().click((async()=>{await addToDeck(t,e)})),$(".addToDeckButton").off().click((async()=>{await addToDeck(t,e)}))}async function populateControls(t){$("#filterCardsControls").empty();let e=await getCardTypes(t);for(let n of e){let e=n.id.replace(/_/g," ").replace(/\b\w/g,(t=>t.toUpperCase()));var s=document.createElement("input");s.type="radio",s.id=n.id,s.value=n.id,s.name="cardType";let a=document.createElement("label");a.htmlFor=n.id,a.textContent=e,$("#filterCardsControls").append(s,a),s.addEventListener("click",(function(){(async()=>{let e=await filterCards("card_type_id",n.id,t);await populateCards(e,t,"#allCards")})()}))}updateDeckInfo()}async function addToDeck(t,e){t.attributes.card_type_id.match(/^[a-z]+_identity$/)?(userDeck.title=t.attributes.title,userDeck.side=e,userDeck.faction=t.attributes.faction_id,userDeck.deck_id=t,userDeck.id_title=t.attributes.title,userDeck.id_subtype=t.attributes.display_subtypes,userDeck.min_deck_size=t.attributes.minimum_deck_size,userDeck.total_influence=t.attributes.influence_limit,userDeck.current_influence=t.attributes.influence_limit,userDeck.base_link=t.attributes.base_link,userDeck.cards=[],userDeck.current_deck_size=userDeck.cards.length,userSelectedID=!0,$("#myDeck").empty()):userSelectedID?(userDeck.cards.push(t),userDeck.current_deck_size=userDeck.cards.length,userDeck.current_influence-=t.attributes.influence_cost,await populateCards(userDeck.cards,e,"#myDeck")):alert("Please select an ID"),updateDeckInfo()}function updateDeckInfo(){let t=`\n    <div class="row">\n      <div class="col">\n        <p class="col side"><strong>${userDeck.side?userDeck.side:" "}</strong></p> \n        <p class="col deckIDtitle">${userDeck.title?userDeck.title:" "}</p>\n        <br><br>\n        <div class="col">\n          <p class="deckSize"><strong>Deck Size: </strong>\n          ${userDeck.current_deck_size?userDeck.current_deck_size:" "} / ${userDeck.min_deck_size?userDeck.min_deck_size:" "}</p>\n          <p class="deckInfluence"><strong>Influence: </strong>\n          ${userDeck.current_influence?userDeck.current_influence:" "} / ${userDeck.total_influence?userDeck.total_influence:" "}</p>\n        </div>\n        <p class="deckID"><strong>Deck ID: </strong>${userDeck.id_title}</p>\n    </div>\n    </div>`;$("#deckInfo").html(t)}async function main(t,e){let s=await getCardTypes(t),n=await s[e].id,a=await filterCards("card_type_id",n,t);await populateCards(a,t,"#allCards"),await populateControls(t),$("#userControls").hide()}nullDeck(),$(".cardEntry").last().click((async()=>{await populateStage(card,side)})),$(".cardEntry").last().click((async()=>{await populateStage(card,side)})),$(document).ready((function(){$("#allCards").hide(),$("#sideRunner").click((async()=>{$("#main-stage-display").empty(),await main("runner",4)})),$("#sideCorp").click((async()=>{$("#main-stage-display").empty(),await main("corp",2)})),$("#runnerSwitch").click((async()=>{$("#main-stage-display").empty(),nullDeck(),await main("runner",4)})),$("#corpSwitch").click((async()=>{$("#main-stage-display").empty(),nullDeck(),await main("corp",2)}))}));