const apiLink="https://api-preview.netrunnerdb.com/api/v3/public/",allCardsDiv="#allCards",myDeckDiv="#myDeck",count=(e,t,s)=>e.cards.filter((e=>e.attributes[t]===s.attributes[t])).length;let userSelectedID=!1,userDeck={};function initializeUserDeck(){return{title:null,side:null,faction:null,deck_id:{},id_title:"",id_subtype:"",min_deck_size:null,current_deck_size:null,total_influence:null,current_influence:null,base_link:null,description:null,cards:[],userSelectedID:!1}}function nullDeck(){$("#myDeck").empty(),$("#myDeck").hide(),userDeck=initializeUserDeck()}async function fetchCards(e,t="",s="",n){const a=await fetch(`${e}${t}?filter[${s}]=${n}`),i=await a.json();if(i.links.next){const e=await fetchCards(i.links.next);i.data=[...i.data,...e]}return i.data}async function getCardTypes(e){let t=await fetch(`${apiLink}card_types`);return(await t.json()).data.filter((t=>t.attributes.side_id===e))}async function filterCards(e="",t="",s=""){let n=(await fetchCards(apiLink,"cards","side_id",s)).filter((s=>s.attributes[e]===t));return n.sort(((e,t)=>{let s=e.attributes.faction_id,n=t.attributes.faction_id;return s.localeCompare(n)})),n}async function populateCards(e,t,s){$(s).empty(),$(s).show(),e.forEach((e=>{let t=e.attributes.faction_id,n=`assets/images/NSG-Visual-Assets/SVG/FactionGlyphs/NSG_${t}.svg`,a=e.attributes.faction_id.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())).replace(/Nbn/g,"NBN").replace(/Haas/g,"Haas-"),i=e.attributes.card_type_id.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())),c=`\n      <div class="col row cardEntry ${t}">  \n        <img class="row faction_icon" src = ${n}>\n        <div class="col">\n          <h2 class='card-title'>\n            ${e.attributes.title}\n          </h2>\n          <p class='cardFaction'>${a}</p>\n          <p class='cardFaction'><strong>${i}</strong>  ${e.attributes.display_subtypes?"| "+e.attributes.display_subtypes:""}</p>\n        </div>\n      </div>`;$(s).append(c)})),$(s).off("click",".cardEntry").on("click",".cardEntry",(async function(){let s=$(this).index(),n=e[s];await populateStage(n,t)}))}async function populateStage(e,t){let s=e.attributes.faction_id.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())).replace(/Nbn/g,"NBN").replace(/Haas/g,"Haas-"),n=e.attributes.card_type_id.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())),a="";if("corp"==t)switch(e.attributes.card_type_id){case"agenda":a=`\n        <div class="${e.attributes.faction_id} flex container-fluid cardDisplay rounded-3">\n          <h1 class="text-center">${e.attributes.title}</h1>\n          <h2 class="text-center">${s}</h2>\n          <p class="col align-content-center ">\n            <em>Agenda Points: </em>\n            <img class="credit" src=\n          "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_AGENDA.svg"> ${e.attributes.agenda_points} \n          <span>&nbsp&nbsp|&nbsp&nbsp<em>Advancement Points: </em>${e.attributes.advancement_requirement}</em></p>\n          <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${e.attributes.display_subtypes?e.attributes.display_subtypes:" "}</em> </p></span>\n          <br><br>\n          <p>${e.attributes.stripped_text}</p>\n          ${userSelectedID&&userDeck.faction===e.attributes.faction_id?'<button class="addToDeckButton col" type="button">Add Card to Deck</button>':""}\n            ${userSelectedID&&userDeck.faction===e.attributes.faction_id?'<button class="removeFromDeckButton col" type="button">Remove Card from Deck</button>':""}\n        </div>`;break;case"asset":case"operation":case"upgrade":a=`\n          <div class="${e.attributes.faction_id} flex container-fluid cardDisplay rounded-3">\n            <h1 class="text-center">${e.attributes.title}</h1>\n            <h2 class="text-center">${s}</h2>\n            <p class="col align-content-center ">\n              <em>Cost: </em>\n              <img class="credit" src=\n              "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_CREDIT.svg">${e.attributes.cost}\n              <span id="trashCost">&nbsp&nbsp|&nbsp&nbsp<em>Trash: </em>\n              <img class="credit" src=\n              "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_TRASH_COSTbw.svg">${e.attributes.trash_cost}&nbsp&nbsp|</span>\n              <span>\n                &nbsp&nbsp\n                <em>Influence: </em>\n                ${e.attributes.influence_cost}\n              </span>\n            </p>\n            <span>\n              <p>\n                <Strong>${n}</Strong>\n                &nbsp&nbsp|&nbsp&nbsp<em>${e.attributes.display_subtypes?e.attributes.display_subtypes:""}</em>\n              </p>\n            </span>\n            <br><br>\n            <p>${e.attributes.stripped_text}</p>\n            ${userSelectedID?'<button class="addToDeckButton col" type="button">Add Card to Deck</button>':""}\n            ${userSelectedID?'<button class="removeFromDeckButton col" type="button">Remove Card from Deck</button>':""}\n          </div>`;break;case"ice":a=`\n          <div class="${e.attributes.faction_id} flex container-fluid cardDisplay rounded-3">\n            <h1 class="text-center">${e.attributes.title}</h1>\n            <h2 class="text-center">${s}</h2>\n            <p class="col align-content-center "><em>Rez Cost: </em><img class="credit" src=\n            "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_REZ_COST.svg"> ${e.attributes.cost}<span>&nbsp&nbsp|&nbsp&nbsp\n            <em>Strength: </em>${e.attributes.strength}\n            <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${e.attributes.display_subtypes?e.attributes.display_subtypes:""}</em></p></span><br>\n            <p>${e.attributes.stripped_text}"</p>\n            ${userSelectedID?'<button class="addToDeckButton col" type="button">Add Card to Deck</button>':""}\n            ${userSelectedID?'<button class="removeFromDeckButton col" type="button">Remove Card from Deck</button>':""}\n          </div>`;break;case"corp_identity":a=`\n        <div class="${e.attributes.faction_id} flex container-fluid cardDisplay rounded-3">\n          <h1 class="text-center">${e.attributes.title}</h1>\n          <h2 class="text-center">${s}</h2>\n          <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${e.attributes.display_subtypes?e.attributes.display_subtypes:""}</em><br><br>\n          <strong>Minimum Deck Size: </strong>${e.attributes.minimum_deck_size}<br>\n          <strong>Influence: </strong>${e.attributes.influence_limit}</p></span> </p></span>\n          <p>${e.attributes.stripped_text}</p>\n          ${userSelectedID?'<button class="userID col" type="button">Change IDs?</button>':'<button class="userID col" type="button">Build deck with this ID</button>'} \n        </div>`;break}if("runner"==t)switch(e.attributes.card_type_id){case"hardware":case"resource":case"program":case"event":a=`\n          <div class="${e.attributes.faction_id} flex container-fluid cardDisplay rounded-3">\n            <h1 class="text-center">${e.attributes.title}</h1>\n            <h2 class="text-center">${s}</h2>\n            <p class="col align-content-center ">\n              <em>Cost: </em>\n              <img class="credit" src=\n            "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_CREDIT.svg">${e.attributes.cost}<span>&nbsp&nbsp|&nbsp&nbsp<em>Influence: </em>${e.attributes.influence_cost}\n            <span id="memoryCost">&nbsp&nbsp|&nbsp&nbsp\n              <em>Memory Cost: </em>\n              <img class="credit" src=\n              "assets/images/NSG-Visual-Assets/SVG/GameSymbols/NSG_Mu.svg">${e.attributes.memory_cost?e.attributes.memory_cost:""}\n            </span>\n              <span>\n                <p>\n                  <Strong>${n}</Strong>\n                  <em>${null==e.attributes.display_subtypes?"":"&nbsp&nbsp|&nbsp&nbsp"+e.attributes.display_subtypes}</em>\n                </p>\n              </span>\n            <p>${e.attributes.stripped_text}</p>\n            ${userSelectedID?'<button class="addToDeckButton col" type="button">Add Card to Deck</button>':""}\n            ${userSelectedID?'<button class="removeFromDeckButton col" type="button">Remove Card from Deck</button>':""}\n          </div>`;break;case"runner_identity":a=`<div class="${e.attributes.faction_id} flex container-fluid cardDisplay rounded-3">\n          <h1 class="text-center">${e.attributes.title}</h1>\n          <h2 class="text-center">${s}</h2>\n          <span><p><Strong>${n}</Strong>&nbsp&nbsp|&nbsp&nbsp<em>${e.attributes.display_subtypes?e.attributes.display_subtypes:""}</em>\n          <br><strong>Link: </strong>${e.attributes.base_link}<br>\n          <strong>Minimum Deck Size: </strong>${e.attributes.minimum_deck_size}<br>\n          <strong>Influence: </strong>${e.attributes.influence_limit}</p></span>\n          <p>${e.attributes.stripped_text}</p>\n          ${userSelectedID?'<button class="userID col" type="button">Change IDs?</button>':'<button class="userID col" type="button">Build deck with this ID</button>'} \n        </div>`;break}$("#main-stage-display").html(a),null==e.attributes.memory_cost?$("#memoryCost").hide():$("#memoryCost").show(),null==e.attributes.trash_cost?$("#trashCost").hide():$("#trashCost").show(),$(".userID").off().click((async()=>{$("#deckInfo").removeClass(),$("#deckInfo").addClass(e.attributes.faction_id),await addToDeck(e,t)})),$(".addToDeckButton").off().click((async()=>{await addToDeck(e,t)})),$(".removeFromDeckButton").off().click((()=>removeCard(e)))}async function populateControls(e){$("#filterCardsControls").empty();let t=await getCardTypes(e);for(let n of t){let t=n.id.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase()));var s=document.createElement("input");s.type="radio",s.id=n.id,s.value=n.id,s.name="cardType";let a=document.createElement("label");a.htmlFor=n.id,a.textContent=t,$("#filterCardsControls").append(s,a),s.addEventListener("click",(async()=>{let t=await filterCards("card_type_id",n.id,e);await populateCards(t,e,"#allCards"),updateDeckInfo()}))}}async function addToDeck(e,t){if(e.attributes.card_type_id.includes("identity"))nullDeck(),Object.assign(userDeck,{title:e.attributes.title,side:t,faction:e.attributes.faction_id,deck_id:e,id_title:e.attributes.title,id_subtype:e.attributes.display_subtypes,min_deck_size:e.attributes.minimum_deck_size,current_influence:0,total_influence:e.attributes.influence_limit,description:e.attributes.stripped_text,base_link:e.attributes.base_link}),userSelectedID=!0,$("#myDeck").empty();else if(userSelectedID){let s=((e,t,s)=>e.cards.filter((e=>e.attributes[t]===s.attributes[t])).length)(userDeck,"title",e);s<e.attributes.deck_limit&&(userDeck.current_influence+e.attributes.influence_cost<=userDeck.total_influence||e.attributes.faction_id===userDeck.faction)?(userDeck.cards.push(e),userDeck.current_deck_size=userDeck.cards.length,userDeck.faction!=e.attributes.faction_id&&(userDeck.current_influence+=e.attributes.influence_cost),await populateCards(userDeck.cards,t,"#myDeck")):s>=e.attributes.deck_limit?alert("Unable to add to deck. Too many copies"):(userDeck.current_influence+=e.attributes.influence_cost>userDeck.total_influence)&&alert("not enough influence")}updateDeckInfo()}function removeCard(e){cardCount=((e,t,s)=>e.cards.filter((e=>e.attributes[t]===s.attributes[t])).length)(userDeck,"title",e),userDeck.cards=userDeck.cards.filter((t=>t!==e)),userDeck.current_deck_size=userDeck.cards.length,e.attributes.faction_id!=userDeck.faction&&(userDeck.current_influence>0?userDeck.current_influence-=e.attributes.influence_cost*cardCount:userDeck.current_influence=userDeck.current_influence),$(`#${e.id}`).remove(),e.attributes.card_type_id.includes("identity")&&(nullDeck(),$("#deckInfo").removeClass()),updateDeckInfo(),populateCards(userDeck.cards,userDeck.side,"#myDeck")}function updateDeckInfo(){let e=`\n    <div class="row">\n        <p class="instructionText text-center">${userSelectedID?"":"Please select an ID from the list on the left"}</p>\n        <div class="col">\n            <p class="col deckIDtitle"><strong>${userDeck.title||" "}</strong><br/><em>${userDeck.side||" "}</em></p>\n            <p>${userDeck.description||" "}</p>  \n            <div class="col">\n                <p class="deckSize"><strong>Deck Size: </strong>${userDeck.current_deck_size||"0"} / ${userDeck.min_deck_size||" "}</p>\n                <p class="deckInfluence"><strong>Influence: </strong>${userDeck.current_influence||"0"} / ${userDeck.total_influence||" "}</p>\n                <p class="deckLink"><strong>Base Link: </strong>${userDeck.base_link||"0"}</p>\n            </div>\n        </div>\n    </div>`;$("#deckInfo").html(e)}async function main(e,t){let s=await getCardTypes(e),n=await s[t].id,a=await filterCards("card_type_id",n,e);await populateCards(a,e,"#allCards"),await populateControls(e),$(".overlay").hide(),$(".cardEntry").last().click((async()=>{await populateStage(card,e)}))}nullDeck(),$(document).ready((async function(){$(deckInfo).hide(),$("#allCards").hide(),$("#myDeck").hide(),$(".overlay").hide(),$("#sideRunner").click((async()=>{$(".overlay").show(),$("#main-stage-display").empty(),$("#deckInfo").show(),userSelectedID=!1,updateDeckInfo(),await main("runner",4)})),$("#sideCorp").click((async()=>{$(".overlay").show(),$("#main-stage-display").empty(),$("deckInfo").show(),userSelectedID=!1,updateDeckInfo(),await main("corp",2)})),$("#switchRunner").click((async()=>{$(".overlay").show(),$("#main-stage-display").empty(),nullDeck(),$("#deckInfo").removeClass(),userSelectedID=!1,updateDeckInfo(),await main("runner",4)})),$("#switchCorp").click((async()=>{$(".overlay").show(),$("#main-stage-display").empty(),nullDeck(),$("#deckInfo").removeClass(),userSelectedID=!1,updateDeckInfo(),await main("corp",2)}))}));